scriptencoding utf-8

Describe filetype indent
  Before each
    new
    setfiletype python
    setlocal expandtab
    setlocal shiftwidth=4
    only!
  End

  It sets local options
    Assert False(&lisp)
    Assert True(&autoindent)
    Assert Equals(&indentexpr, 'GetPEP8PythonIndent()')

    Assert NotMatch(&indentkeys, '0[[({]')
    Assert NotMatch(&indentkeys, ':\%(>\)\@!')
    Assert Match(&indentkeys, '0)')
    Assert Match(&indentkeys, '0]')
    Assert Match(&indentkeys, '0}')
    Assert Match(&indentkeys, '<:>')
    Assert Match(&indentkeys, '=elif')
    Assert Match(&indentkeys, '=except')
    Assert Match(&indentkeys, '=finally')
  End

  Describe string
    It keeps the current indent
      let in = "'\<CR>'"
      let out = [
      \  "'",
      \  "'",
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It keeps the current indent (triple-quoted string)
      let in = "'''\<CR>'''"
      let out = [
      \  "'''",
      \  "'''",
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level
      let in = "d = {'k': 'v'}\<Esc>%a\<CR>\<Esc>$i,\<CR>"
      let out = [
      \  'd = {',
      \  "    'k': 'v',",
      \  '}',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe :
    It keeps the current indent when it is not at the EOL
      let in  = "with open('spam.txt') as fp:\<CR>"
      let in .= "data = fp.read()\<CR>"
      let in .= "0\<C-D>print(data)\<Esc>i[3:]"
      let out = [
      \  "with open('spam.txt') as fp:",
      \  '    data = fp.read()',
      \  'print(data[3:])',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It keeps the current indent when compound statement is not found
      let in  = "with open('spam.txt') as fp:\<CR>"
      let in .= "data = fp.read()\<CR>"
      let in .= "0\<C-D>\<Esc>iprint(data[3:])"
      let out = [
      \  "with open('spam.txt') as fp:",
      \  '    data = fp.read()',
      \  'print(data[3:])',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level
      let in  = "if s == '''\<CR>\<CR>''':\<CR>"
      let in .= "# comment\<CR>"
      let in .= "v ="
      let out = [
      \  "if s == '''",
      \  '',
      \  "''':",
      \  '    # comment',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe comment
    It keeps the current indent
      let in  = "def spam():\<CR>if True:\<CR>pass\<CR>"
      let in .= "0\<C-D>def eggs():\<CR>\pass\<Esc>\<C-V>0kI# \<Esc>gg=G"
      let out = [
      \  'def spam():',
      \  '    if True:',
      \  '        pass',
      \  '# def eggs():',
      \  '#     pass',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe line continuation
    It increases the indent level
      let in = "i = 1 + \\\<CR>2 + \\\<CR>3"
      let out = [
      \  'i = 1 + \',
      \  '    2 + \',
      \  '    3',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents by the option value
      let b:python_indent_continue = '&sw / 2'
      let in = "i = 1 + \\\<CR>2 + \\\<CR>3"
      let out = [
      \  'i = 1 + \',
      \  '  2 + \',
      \  '  3',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe logical line
    It indents like the previous line
      let in = "\<CR>i = 1"
      let out = [
      \  '',
      \  'i = 1',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (line continuation)
      let in  = "def func():\<CR>"
      let in .= "i = 1 + \\\<CR>2 + \\\<CR>3\<CR>"
      let in .= "v ="
      let out = [
      \  'def func():',
      \  '    i = 1 + \',
      \  '        2 + \',
      \  '        3',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (bracket)
      let in  = "def func():\<CR>"
      let in .= "i = (1 +\<CR>2 +\<CR>3)\<CR>"
      let in .= "v ="
      let out = [
      \  'def func():',
      \  '    i = (1 +',
      \  '         2 +',
      \  '         3)',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (triple-quoted string)
      let in  = "def func():\<CR>"
      let in .= "s = '''\\\<CR>0\<C-D>spam\<CR>eggs\<CR>ham\<CR>'''\<CR>"
      let in .= "v ="
      let out = [
      \  'def func():',
      \  "    s = '''\\",
      \  'spam',
      \  'eggs',
      \  'ham',
      \  "'''",
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (complex)
      let in  = "def func():\<CR>"
      let in .= "s = 'a' + \\\<CR>'b' +"
      let in .= " ('c'\<CR>'d') + \\\<CR>"
      let in .= "'''\\\<CR>0\<C-D>e\\\<CR>f\\\<CR>''' +"
      let in .= " (\<CR>'g'\<CR>'h'\<CR>) + \\\<CR>"
      let in .= "'i' + \\\<CR>'j'\<CR>"
      let in .= "v ="
      let out = [
      \  'def func():',
      \  "    s = 'a' + \\",
      \  "        'b' + ('c'",
      \  "               'd') + \\",
      \  "        '''\\",
      \  'e\',
      \  'f\',
      \  "''' + (",
      \  "    'g'",
      \  "    'h'",
      \  ') + \',
      \  "        'i' + \\",
      \  "        'j'",
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe list
    It aligns with left brackets
      let in = "l = [0,\<CR># [\<CR>1,\<CR># ]\<CR>2]"
      let out = [
      \  'l = [0,',
      \  '     # [',
      \  '     1,',
      \  '     # ]',
      \  '     2]',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level (hanging indent)
      let in = "l = [\<CR># [\<CR>0,\<CR>1,\<CR>2,\<CR># ]\<CR>]"
      let out = [
      \  'l = [',
      \  '    # [',
      \  '    0,',
      \  '    1,',
      \  '    2,',
      \  '    # ]',
      \  ']',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents by the option value (hanging indent)
      let b:python_indent_continue = '&sw / 2'
      let in = "l = [\<CR>0,\<CR>1,\<CR>2,\<CR>]"
      let out = [
      \  'l = [',
      \  '  0,',
      \  '  1,',
      \  '  2,',
      \  ']',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level for right brackets (hanging indent)
      let b:python_indent_right_bracket = 1
      let in = "l = [\<CR>0,\<CR>1,\<CR>2,\<CR>]"
      let out = [
      \  'l = [',
      \  '    0,',
      \  '    1,',
      \  '    2,',
      \  '    ]',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe call
    It aligns with left brackets
      let in = "print('pi = {}, e = {}').format(3.14,\<CR>2.718))"
      let out = [
      \  "print('pi = {}, e = {}').format(3.14,",
      \  '                                2.718))',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It aligns with left brackets (multi-byte characters)
      let in = "print('π = {}, e = {}').format(3.14,\<CR>2.718))"
      let out = [
      \  "print('π = {}, e = {}').format(3.14,",
      \  repeat(' ', 30 + strdisplaywidth('π')) . '2.718))',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe function
    It aligns with left brackets
      let in = "def func(*args,\<CR>**kwargs):"
      let out = [
      \  'def func(*args,',
      \  '         **kwargs):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level (hanging indent)
      let in = "def func(\<CR>*args,\<CR>**kwargs):"
      let out = [
      \  'def func(',
      \  '        *args,',
      \  '        **kwargs):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents by the option value (hanging indent)
      let in = "def func(\<CR>*args,\<CR>**kwargs\<CR>):"
      let out = [
      \  'def func(',
      \  '        *args,',
      \  '        **kwargs',
      \  '):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It decreases the indent level after pass
      let in  = "def spam():\<CR>pass\<CR>"
      let in .= "def eggs():"
      let out = [
      \  'def spam():',
      \  '    pass',
      \  'def eggs():',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It decreases the indent level after return
      let in  = "def spam():\<CR>return\<CR>"
      let in .= "def eggs():"
      let out = [
      \  'def spam():',
      \  '    return',
      \  'def eggs():',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It decreases the indent level after ellipsis
      let in  = "def spam():\<CR>...\<CR>"
      let in .= "def eggs():\<CR>....\<CR>"
      let in .= "def ham():"
      let out = [
      \  'def spam():',
      \  '    ...',
      \  'def eggs():',
      \  '    ....',
      \  '    def ham():',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe if statement
    It aligns with left brackets
      let in = "if (True and\<CR>True):"
      let out = [
      \  'if (True and',
      \  '    True):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level by 2
      let b:python_indent_multiline_statement = 1
      let in = "if (True and\<CR>True):"
      let out = [
      \  'if (True and',
      \  '        True):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level (hanging indent)
      let in = "if (\<CR>True and\<CR>True\<CR>):"
      let out = [
      \  'if (',
      \  '    True and',
      \  '    True',
      \  '):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level by 2 (hanging indent)
      let b:python_indent_multiline_statement = 1
      let in = "if (\<CR>True and\<CR>True\<CR>):"
      let out = [
      \  'if (',
      \  '        True and',
      \  '        True',
      \  '):',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level (line continueation)
      let in = "if True and \\\<CR>True:"
      let out = [
      \  'if True and \',
      \  '    True:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level by 2 (line continuation)
      let b:python_indent_multiline_statement = 1
      let in = "if True and \\\<CR>True:"
      let out = [
      \  'if True and \',
      \  '        True:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe compound statement
    It indents the elif statement
      let in  = "if 1:\<CR>i = 1\<CR>elif 2:\<CR>"
      let in .= "if 3:\<CR>i = 3\<CR>elif 4:\<CR>i = 4\<CR>else:\<CR>pass\<CR>"
      let in .= "elif 5:"
      let out = [
      \  'if 1:',
      \  '    i = 1',
      \  'elif 2:',
      \  '    if 3:',
      \  '        i = 3',
      \  '    elif 4:',
      \  '        i = 4',
      \  '    else:',
      \  '        pass',
      \  'elif 5:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the else statement
      let in  = "if 1:\<CR>i = 1\<CR>else:\<CR>"
      let in .= "if 2:\<CR>i = 2\<CR>elif 3:\<CR>pass\<CR>else:\<CR>"
      let in .= "for _ in []:\<CR>continue\<CR>else:\<CR>"
      let in .= "try:\<CR>i = 4\<CR>else:\<CR>"
      let in .= "try:\<CR>i = 5\<CR>except:\<CR>raise\<CR>else:"
      let out = [
      \  'if 1:',
      \  '    i = 1',
      \  'else:',
      \  '    if 2:',
      \  '        i = 2',
      \  '    elif 3:',
      \  '        pass',
      \  '    else:',
      \  '        for _ in []:',
      \  '            continue',
      \  '        else:',
      \  '            try:',
      \  '                i = 4',
      \  '            else:',
      \  '                try:',
      \  '                    i = 5',
      \  '                except:',
      \  '                    raise',
      \  '                else:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the except statement
      let in  = "try:\<CR>i = 1\<CR>except OSError:\<CR>"
      let in .= "try:\<CR>i = 2\<CR>else:\<CR>pass\<CR>"
      let in .= "except:"
      let out = [
      \  'try:',
      \  '    i = 1',
      \  'except OSError:',
      \  '    try:',
      \  '        i = 2',
      \  '    else:',
      \  '        pass',
      \  'except:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the finally statement
      let in  = "try:\<CR>i = 1\<CR>finally:\<CR>"
      let in .= "try:\<CR>i = 2\<CR>except:\<CR>raise\<CR>finally:\<CR>"
      let in .= "try:\<CR>i = 3\<CR>else:\<CR>pass\<CR>finally:"
      let out = [
      \  'try:',
      \  '    i = 1',
      \  'finally:',
      \  '    try:',
      \  '        i = 2',
      \  '    except:',
      \  '        raise',
      \  '    finally:',
      \  '        try:',
      \  '            i = 3',
      \  '        else:',
      \  '            pass',
      \  '        finally:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It ignores compound statements in strings
      let in  = "if 1:\<CR>"
      let in .= "if 2:\<CR>s = '''\<CR>"
      let in .= "0\<C-D>if 3:\<CR>\<C-T>pass'''\<CR>elif 4:"
      let out = [
      \  'if 1:',
      \  '    if 2:',
      \  "        s = '''",
      \  'if 3:',
      \  "    pass'''",
      \  '    elif 4:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It ignores unindented comment
      let in  = "def func():\<CR>"
      let in .= "if 1:\<CR>pass\<CR>"
      let in .= "0\<C-D>  # comment\<CR>"
      let in .= "elif 2:"
      let out = [
      \  'def func():',
      \  '    if 1:',
      \  '        pass',
      \  '  # comment',
      \  '    elif 2:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the with statement (line continuation)
      let in  = "with open('a') as fp1, \\\<CR>open('b') as fp2:"
      let out = [
      \  'with open(''a'') as fp1, \',
      \  '     open(''b'') as fp2:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents compound statements (line continuation)
      let in  = "def func():\<CR>"
      let in .= "\\\<CR>0\<C-D>if 1:\<CR>pass\<CR>"
      let in .= "elif 2:"
      let out = [
      \  'def func():',
      \  '    \',
      \  'if 1:',
      \  '        pass',
      \  '    elif 2:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End
End
