scriptencoding utf-8

Describe filetype indent
  Before each
    new
    setfiletype python
    setlocal expandtab
    setlocal shiftwidth=4
    only!
  End

  It sets local options
    Assert False(&lisp)
    Assert True(&autoindent)
    Assert Equals(&indentexpr, 'GetPEP8PythonIndent()')

    Assert NotMatch(&indentkeys, '0[[({]')
    Assert NotMatch(&indentkeys, ':\%(>\)\@!')
    Assert Match(&indentkeys, '0)')
    Assert Match(&indentkeys, '0]')
    Assert Match(&indentkeys, '0}')
    Assert Match(&indentkeys, '<:>')
    Assert Match(&indentkeys, '=elif')
    Assert Match(&indentkeys, '=except')
    Assert Match(&indentkeys, '=finally')
  End

  Describe :
    It keeps the current indent when it is not at the EOL
      let in  = "with open('spam.txt') as fp:\<CR>"
      let in .= "data = fp.read()\<CR>"
      let in .= "0\<C-D>print(data)\<Esc>i[3:]"
      let out = [
      \  "with open('spam.txt') as fp:",
      \  '    data = fp.read()',
      \  'print(data[3:])',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It keeps the current indent when compound statement is not found
      let in  = "with open('spam.txt') as fp:\<CR>"
      let in .= "data = fp.read()\<CR>"
      let in .= "0\<C-D>\<Esc>iprint(data[3:])"
      let out = [
      \  "with open('spam.txt') as fp:",
      \  '    data = fp.read()',
      \  'print(data[3:])',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It increases the indent level
      let in  = "if s == '''\<CR>\<CR>''':\<CR>"
      let in .= "# comment\<CR>"
      let in .= "v ="
      let out = [
      \  "if s == '''",
      \  '',
      \  "''':",
      \  '    # comment',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe comment
    It keeps the current indent
      let in  = "def spam():\<CR>if True:\<CR>pass\<CR>"
      let in .= "0\<C-D>def eggs():\<CR>\pass\<Esc>\<C-V>0kI# \<Esc>gg=G"
      let out = [
      \  'def spam():',
      \  '    if True:',
      \  '        pass',
      \  '# def eggs():',
      \  '#     pass',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It ignores unindented comment
      let in  = "def spam():\<CR>"
      let in .= "if 1:\<CR>pass\<CR>"
      let in .= "0\<C-D>  # comment\<CR>"
      let in .= "elif 2:"
      let out = [
      \  'def spam():',
      \  '    if 1:',
      \  '        pass',
      \  '  # comment',
      \  '    elif 2:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe line continuation
    It increases the indent level
      let in  = "i = 1 + \\\<CR>2 + \\\<CR>3"
      let out = [
      \  'i = 1 + \',
      \  '    2 + \',
      \  '    3',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents by the option value
      let b:python_indent_continue = '&sw / 2'
      let in  = "i = 1 + \\\<CR>2 + \\\<CR>3"
      let out = [
      \  'i = 1 + \',
      \  '  2 + \',
      \  '  3',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents complex line
      let in  = "def spam():\<CR>"
      let in .= "\\\<CR>0\<C-D>if 1:\<CR>pass\<CR>"
      let in .= "elif 2:"
      let out = [
      \  'def spam():',
      \  '    \',
      \  'if 1:',
      \  '        pass',
      \  '    elif 2:',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe logical line
    It indents like the previous line
      let in  = "\<CR>i = 1"
      let out = [
      \  '',
      \  'i = 1',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (line continuation)
      let in  = "def spam():\<CR>"
      let in .= "i = 1 + \\\<CR>2 + \\\<CR>3\<CR>"
      let in .= "v ="
      let out = [
      \  'def spam():',
      \  '    i = 1 + \',
      \  '        2 + \',
      \  '        3',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (bracket)
      let in  = "def spam():\<CR>"
      let in .= "i = (1 +\<CR>2 +\<CR>3)\<CR>"
      let in .= "v ="
      let out = [
      \  'def spam():',
      \  '    i = (1 +',
      \  '         2 +',
      \  '         3)',
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (triple-quoted string)
      let in  = "def spam():\<CR>"
      let in .= "s = '''\\\<CR>0\<C-D>spam\<CR>eggs\<CR>ham\<CR>'''\<CR>"
      let in .= "v ="
      let out = [
      \  'def spam():',
      \  "    s = '''\\",
      \  'spam',
      \  'eggs',
      \  'ham',
      \  "'''",
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents like the previous line (complex)
      let in  = "def spam():\<CR>"
      let in .= "s = 'a' + \\\<CR>'b' +"
      let in .= " ('c'\<CR>'d') + \\\<CR>"
      let in .= "'''\\\<CR>0\<C-D>e\\\<CR>f\\\<CR>''' +"
      let in .= " (\<CR>'g'\<CR>'h'\<CR>) + \\\<CR>"
      let in .= "'i' + \\\<CR>'j'\<CR>"
      let in .= "v ="
      let out = [
      \  'def spam():',
      \  "    s = 'a' + \\",
      \  "        'b' + ('c'",
      \  "               'd') + \\",
      \  "        '''\\",
      \  'e\',
      \  'f\',
      \  "''' + (",
      \  "    'g'",
      \  "    'h'",
      \  ') + \',
      \  "        'i' + \\",
      \  "        'j'",
      \  '    v =',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe expression
    Describe string
      It keeps the current indent
        let in  = "'\<CR>'"
        let out = [
        \  "'",
        \  "'",
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It keeps the current indent (triple-quoted string)
        let in  = "'''\<CR>'''"
        let out = [
        \  "'''",
        \  "'''",
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It ignores compound statements in strings
        let in  = "if 1:\<CR>"
        let in .= "if 2:\<CR>"
        let in .= "s = '''\<CR>0\<C-D>if 3:\<CR>\<C-T>pass'''\<CR>"
        let in .= "elif 4:"
        let out = [
        \  'if 1:',
        \  '    if 2:',
        \  "        s = '''",
        \  'if 3:',
        \  "    pass'''",
        \  '    elif 4:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe list
      It aligns with left brackets
        let in  = "l = [0,\<CR># [\<CR>1,\<CR># ]\<CR>2]"
        let out = [
        \  'l = [0,',
        \  '     # [',
        \  '     1,',
        \  '     # ]',
        \  '     2]',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "l = [\<CR># [\<CR>0,\<CR>1,\<CR>2,\<CR># ]\<CR>]"
        let out = [
        \  'l = [',
        \  '    # [',
        \  '    0,',
        \  '    1,',
        \  '    2,',
        \  '    # ]',
        \  ']',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents by the option value (hanging indent)
        let b:python_indent_continue = '&sw / 2'
        let in  = "l = [\<CR>0,\<CR>1,\<CR>2,\<CR>]"
        let out = [
        \  'l = [',
        \  '  0,',
        \  '  1,',
        \  '  2,',
        \  ']',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level for right brackets (hanging indent)
        let b:python_indent_right_bracket = 1
        let in  = "l = [\<CR>0,\<CR>1,\<CR>2,\<CR>]"
        let out = [
        \  'l = [',
        \  '    0,',
        \  '    1,',
        \  '    2,',
        \  '    ]',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe ...
      It keeps the current indent
        let in  = "i = ...\<CR>"
        let in .= "j = ..."
        let out = [
        \  'i = ...',
        \  'j = ...',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It decreases the indent level after ellipsis
        let in  = "def spam():\<CR>...\<CR>"
        let in .= "def eggs():\<CR>....\<CR>"
        let in .= "def ham():"
        let out = [
        \  'def spam():',
        \  '    ...',
        \  'def eggs():',
        \  '    ....',
        \  '    def ham():',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe call
      It aligns with left brackets
        let in  = "print('pi = {}, e = {}').format(3.14,\<CR>2.718))"
        let out = [
        \  "print('pi = {}, e = {}').format(3.14,",
        \  '                                2.718))',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It aligns with left brackets (multi-byte characters)
        let in  = "print('π = {}, e = {}').format(3.14,\<CR>2.718))"
        let out = [
        \  "print('π = {}, e = {}').format(3.14,",
        \  repeat(' ', 30 + strdisplaywidth('π')) . '2.718))',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End
  End

  Describe simple statement
    It indents the assert statement
      let in  = "assert True \\\<CR>or False"
      let out = [
      \  'assert True \',
      \  '       or False',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the del statement
      let in  = "del spam, \\\<CR>eggs"
      let out = [
      \  'del spam, \',
      \  '    eggs',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the return statement
      let in  = "return True \\\<CR>or False"
      let out = [
      \  'return True \',
      \  '       or False',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the yield statement
      let in  = "yield spam \\\<CR>.eggs()\<CR>"
      let in .= "yield from ham \\\<CR>.toast()\<CR>"
      let in .= "yield \\\<CR>from \\\<CR>beans \\\<CR>.bacon()"
      let out = [
      \  'yield spam \',
      \  '      .eggs()',
      \  'yield from ham \',
      \  '           .toast()',
      \  'yield \',
      \  '      from \',
      \  '           beans \',
      \  '           .bacon()',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the raise statement
      let in  = "raise Exception() \\\<CR>.with_traceback(tb)"
      let out = [
      \  'raise Exception() \',
      \  '      .with_traceback(tb)',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the import statement
      let in  = "import spam \\\<CR>.eggs\<CR>"
      let in .= "from ham \\\<CR>.toast"
      let out = [
      \  'import spam \',
      \  '       .eggs',
      \  'from ham \',
      \  '     .toast',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the global statement
      let in  = "global spam, \\\<CR>eggs"
      let out = [
      \  'global spam, \',
      \  '       eggs',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End

    It indents the nonlocal statement
      let in  = "nonlocal spam, \\\<CR>eggs"
      let out = [
      \  'nonlocal spam, \',
      \  '         eggs',
      \]
      Assert Equals(Insert(in), Buffer(out))
    End
  End

  Describe compound statement
    Describe if statement
      It aligns with left brackets
        let in  = "if (True\<CR>and False):\<CR>pass\<CR>"
        let in .= "elif (False\<CR>and True):"
        let out = [
        \  'if (True',
        \  '    and False):',
        \  '    pass',
        \  'elif (False',
        \  '      and True):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2
        let b:python_indent_multiline_statement = 1
        let in  = "if (True\<CR>and False):\<CR>pass\<CR>"
        let in .= "elif (False\<CR>and True):"
        let out = [
        \  'if (True',
        \  '        and False):',
        \  '    pass',
        \  'elif (False',
        \  '          and True):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "if (\<CR>True\<CR>and False\<CR>):\<CR>pass\<CR>"
        let in .= "elif (\<CR>False\<CR>and True\<CR>):"
        let out = [
        \  'if (',
        \  '    True',
        \  '    and False',
        \  '):',
        \  '    pass',
        \  'elif (',
        \  '    False',
        \  '    and True',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2 (hanging indent)
        let b:python_indent_multiline_statement = 1
        let in  = "if (\<CR>True\<CR>and False\<CR>):\<CR>pass\<CR>"
        let in .= "elif (\<CR>False\<CR>and True\<CR>):"
        let out = [
        \  'if (',
        \  '        True',
        \  '        and False',
        \  '):',
        \  '    pass',
        \  'elif (',
        \  '        False',
        \  '        and True',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (line continueation)
        let in  = "if True and \\\<CR>False:\<CR>pass\<CR>"
        let in .= "elif False and \\\<CR>True:"
        let out = [
        \  'if True and \',
        \  '   False:',
        \  '    pass',
        \  'elif False and \',
        \  '     True:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the elif clause
        let in  = "if 1:\<CR>"
        let in .= "if 2:\<CR>i = 2\<CR>"
        let in .= "elif 3:\<CR>i = 3\<CR>"
        let in .= "elif 4:"
        let out = [
        \  'if 1:',
        \  '    if 2:',
        \  '        i = 2',
        \  '    elif 3:',
        \  '        i = 3',
        \  '    elif 4:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the else clause
        let in  = "if 1:\<CR>"
        let in .= "if 2:\<CR>i = 2\<CR>"
        let in .= "elif 3:\<CR>i = 3\<CR>"
        let in .= "else:\<CR>i = 4\<CR>"
        let in .= "else:"
        let out = [
        \  'if 1:',
        \  '    if 2:',
        \  '        i = 2',
        \  '    elif 3:',
        \  '        i = 3',
        \  '    else:',
        \  '        i = 4',
        \  'else:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe while statement
      It aligns with left brackets
        let in  = "while (True\<CR>and False):"
        let out = [
        \  'while (True',
        \  '       and False):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2
        let b:python_indent_multiline_statement = 1
        let in  = "while (True\<CR>and False):"
        let out = [
        \  'while (True',
        \  '           and False):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "while (\<CR>True\<CR>and False\<CR>):"
        let out = [
        \  'while (',
        \  '    True',
        \  '    and False',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2 (hanging indent)
        let b:python_indent_multiline_statement = 1
        let in  = "while (\<CR>True\<CR>and False\<CR>):"
        let out = [
        \  'while (',
        \  '        True',
        \  '        and False',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (line continueation)
        let in  = "while True and \\\<CR>False:"
        let out = [
        \  'while True and \',
        \  '      False:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the else clause
        let in  = "while 1:\<CR>"
        let in .= "while 2:\<CR>break\<CR>"
        let in .= "else:\<CR>pass\<CR>"
        let in .= "else:"
        let out = [
        \  'while 1:',
        \  '    while 2:',
        \  '        break',
        \  '    else:',
        \  '        pass',
        \  'else:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe for statement
      It aligns with left brackets
        let in  = "for _ in (True,\<CR>False):"
        let out = [
        \  'for _ in (True,',
        \  '          False):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2
        let b:python_indent_multiline_statement = 1
        let in  = "for _ in (True,\<CR>False):"
        let out = [
        \  'for _ in (True,',
        \  '              False):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "for _ in (\<CR>True,\<CR>False,\<CR>):"
        let out = [
        \  'for _ in (',
        \  '    True,',
        \  '    False,',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2 (hanging indent)
        let b:python_indent_multiline_statement = 1
        let in  = "for _ in (\<CR>True,\<CR>False,\<CR>):"
        let out = [
        \  'for _ in (',
        \  '        True,',
        \  '        False,',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (line continueation)
        let in  = "for _ in True, \\\<CR>False:"
        let out = [
        \  'for _ in True, \',
        \  '    False:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the else clause
        let in  = "for _ in range(1):\<CR>"
        let in .= "for _ in range(2):\<CR>continue\<CR>"
        let in .= "else:\<CR>pass\<CR>"
        let in .= "else:"
        let out = [
        \  'for _ in range(1):',
        \  '    for _ in range(2):',
        \  '        continue',
        \  '    else:',
        \  '        pass',
        \  'else:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe try statement
      It aligns with left brackets
        let in  = "try:\<CR>...\<CR>"
        let in .= "except (TypeError,\<CR>ValueError):"
        let out = [
        \  'try:',
        \  '    ...',
        \  'except (TypeError,',
        \  '        ValueError):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2
        let b:python_indent_multiline_statement = 1
        let in  = "try:\<CR>...\<CR>"
        let in .= "except (TypeError,\<CR>ValueError):"
        let out = [
        \  'try:',
        \  '    ...',
        \  'except (TypeError,',
        \  '            ValueError):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "try:\<CR>...\<CR>"
        let in .= "except (\<CR>TypeError,\<CR>ValueError\<CR>):"
        let out = [
        \  'try:',
        \  '    ...',
        \  'except (',
        \  '    TypeError,',
        \  '    ValueError',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2 (hanging indent)
        let b:python_indent_multiline_statement = 1
        let in  = "try:\<CR>...\<CR>"
        let in .= "except (\<CR>TypeError,\<CR>ValueError\<CR>):"
        let out = [
        \  'try:',
        \  '    ...',
        \  'except (',
        \  '        TypeError,',
        \  '        ValueError',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (line continueation)
        let in  = "try:\<CR>...\<CR>"
        let in .= "except TypeError, \\\<CR>ValueError:"
        let out = [
        \  'try:',
        \  '    ...',
        \  'except TypeError, \',
        \  '       ValueError:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the except clause
        let in  = "try:\<CR>"
        let in .= "try:\<CR>...\<CR>"
        let in .= "except TypeError:\<CR>pass\<CR>"
        let in .= "except ValueError:"
        let out = [
        \  'try:',
        \  '    try:',
        \  '        ...',
        \  '    except TypeError:',
        \  '        pass',
        \  '    except ValueError:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the else clause
        let in  = "try:\<CR>"
        let in .= "try:\<CR>...\<CR>"
        let in .= "except TypeError:\<CR>pass\<CR>"
        let in .= "else:"
        let out = [
        \  'try:',
        \  '    try:',
        \  '        ...',
        \  '    except TypeError:',
        \  '        pass',
        \  '    else:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It indents the finally clause
        let in  = "try:\<CR>"
        let in .= "try:\<CR>...\<CR>"
        let in .= "except TypeError:\<CR>pass\<CR>"
        let in .= "finally:\<CR>pass\<CR>"
        let in .= "finally:\<CR>"
        let in .= "try:\<CR>...\<CR>"
        let in .= "except ValueError:\<CR>pass\<CR>"
        let in .= "else:\<CR>pass\<CR>"
        let in .= "finally:"
        let out = [
        \  'try:',
        \  '    try:',
        \  '        ...',
        \  '    except TypeError:',
        \  '        pass',
        \  '    finally:',
        \  '        pass',
        \  'finally:',
        \  '    try:',
        \  '        ...',
        \  '    except ValueError:',
        \  '        pass',
        \  '    else:',
        \  '        pass',
        \  '    finally:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe with statement
      It aligns with left brackets
        let in  = "with (open('spam') as fp1,\<CR>open('eggs') as fp2):"
        let out = [
        \  'with (open(''spam'') as fp1,',
        \  '      open(''eggs'') as fp2):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2
        let b:python_indent_multiline_statement = 1
        let in  = "with (open('spam') as fp1,\<CR>open('eggs') as fp2):"
        let out = [
        \  'with (open(''spam'') as fp1,',
        \  '          open(''eggs'') as fp2):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "with (\<CR>open('spam') as fp1,\<CR>open('eggs') as fp2,\<CR>):"
        let out = [
        \  'with (',
        \  '    open(''spam'') as fp1,',
        \  '    open(''eggs'') as fp2,',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level by 2 (hanging indent)
        let b:python_indent_multiline_statement = 1
        let in  = "with (\<CR>open('spam') as fp1,\<CR>open('eggs') as fp2,\<CR>):"
        let out = [
        \  'with (',
        \  '        open(''spam'') as fp1,',
        \  '        open(''eggs'') as fp2,',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (line continueation)
        let in  = "with open('spam') as fp1, \\\<CR>open('eggs') as fp2:"
        let out = [
        \  'with open(''spam'') as fp1, \',
        \  '     open(''eggs'') as fp2:',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe function definition
      It aligns with left brackets
        let in  = "def spam(*args,\<CR>**kwargs):"
        let out = [
        \  'def spam(*args,',
        \  '         **kwargs):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "def spam(\<CR>*args,\<CR>**kwargs\<CR>):"
        let out = [
        \  'def spam(',
        \  '        *args,',
        \  '        **kwargs',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It decreases the indent level after pass
        let in  = "def spam():\<CR>pass\<CR>"
        let in .= "def eggs():"
        let out = [
        \  'def spam():',
        \  '    pass',
        \  'def eggs():',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It decreases the indent level after return
        let in  = "def spam():\<CR>return\<CR>"
        let in .= "def eggs():"
        let out = [
        \  'def spam():',
        \  '    return',
        \  'def eggs():',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End

    Describe class definition
      It aligns with left brackets
        let in  = "class Spam(Eggs,\<CR>Ham):"
        let out = [
        \  'class Spam(Eggs,',
        \  '           Ham):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End

      It increases the indent level (hanging indent)
        let in  = "class Spam(\<CR>Eggs,\<CR>Ham\<CR>):"
        let out = [
        \  'class Spam(',
        \  '        Eggs,',
        \  '        Ham',
        \  '):',
        \]
        Assert Equals(Insert(in), Buffer(out))
      End
    End
  End
End
